import java.util.HashMap;


public class Clock implements Comparable<Clock> {

	private HashMap<String,Integer> clockValue;

    public Clock(HashMap<String,Integer> clock) {
        this.clockValue = clock;
    }

    public String getName() {
        return name;
    }

    public HashMap<String,Integer> getClock() {
        return clockValue;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final QueueElement other = (QueueElement) obj;
        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
            return false;
        }
        if (this.clockValue != other.clockValue) {
            return false;
        }
        return true;
    }

    public int compareTo(QueueElement i) {
        if (this.clockValue == i.clockValue) {
            return this.name.compareTo(i.name);
        }
        int greater = 1;
        for (String key : this.clockValue.keySet()) {
            if(this.clockValue.get(key) < i.clockValue.get(key)){
            	greater = 0;
            }
        }
        return greater;
    }

    @Override
    public String toString() {
        return String.format("%s: $%d", name, clockValue);
    }      
}
