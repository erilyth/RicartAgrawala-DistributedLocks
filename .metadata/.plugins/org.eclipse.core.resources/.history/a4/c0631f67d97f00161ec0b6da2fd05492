import java.net.MalformedURLException;
import java.rmi.*;  
import java.rmi.server.*;
import java.util.*;

import com.example.result.ResultProto.Clock;
import com.example.result.ResultProto.ClockMember;
import com.example.result.ResultProto.Queue;
import com.example.result.ResultProto.QueueElement;

public class AdderRemote extends UnicastRemoteObject implements Adder{  
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public Queue.Builder queueB = Queue.newBuilder();
	public Queue queue = queueB.build();
	public HashMap<String, String> acks = new HashMap<String, String>();
	public int hasLock = 0;
	public int requestLock = 0;
	public Clock.Builder requestLockClockB = Clock.newBuilder();
	public Clock requestLockClock = requestLockClockB.build();
	public String name;
	public Clock.Builder myClockB = Clock.newBuilder();
	public Clock myClock = myClockB.build();

	public int getHasLock() throws RemoteException {
		return hasLock;
	}

	public void setHasLock(int hasLock) throws RemoteException {
		this.hasLock = hasLock;
	}

	public int getRequestLock() throws RemoteException {
		return requestLock;
	}

	public void setRequestLock(int requestLock) throws RemoteException {
		this.requestLock = requestLock;
	}

	public String getName() throws RemoteException {
		return name;
	}

	public void setName(String name) throws RemoteException {
		this.name = name;
	}

	public Clock getMyClock() throws RemoteException {
		return myClock;
	}

	public void setMyClock(Clock clock) throws RemoteException {
		this.myClock = clock;
	}
	
	public void addqueue(QueueElement elem) throws RemoteException {
		queueB.addQueue(elem);
		queue = queueB.build();
	}
	
	public QueueElement removequeue() throws RemoteException {
		QueueElement top = queueB.getQueue(0);
		queueB.removeQueue(0);
		queue = queueB.build();
		System.out.println("Remove top of queue of " + name);
		System.out.println("Top of the queue was " + top);
		return top;
	}
	
	public QueueElement topqueue() throws RemoteException {
		QueueElement top = queueB.getQueue(0);
		return top;
	}
	
	public int getack(String myname) throws RemoteException {
		System.out.println("Check if ack of " + myname + " is there in " + name);
		System.out.println(acks.get(myname));
		if(acks.get(myname)!= null && acks.get(myname).equals("1")){
			return 1;
		}
		else{
			return 0;
		}
	}
	
	public void setack(String name) throws RemoteException {
		acks.put(name, "1");
	}
	
	public void setRequestLockClock(Clock clock) throws RemoteException {
		this.requestLockClock = clock;
	}
	
	AdderRemote(String name_cur) throws RemoteException{  
		super();
		name = name_cur;
		String name = "myProg";
		for(int i=1;i<=2;i++){
			String node_name = name + "-" + i;
			ClockMember.Builder new_clk = ClockMember.newBuilder();
			new_clk.setName(node_name);
			new_clk.setValue(1);
			ClockMember built_clk = new_clk.build();
			this.myClockB.addClock(built_clk);
			this.myClock = myClockB.build();
			System.out.println(this.myClock);
			System.out.println("That was the initial clock!");
		}
	}
	
	public int compareClock(Clock clk1, Clock clk2){
		int res = 1;
		for(int i=0;i<clk1.getClockCount();i++){
			int cur = clk1.getClock(i).getValue();
			int cur2 = clk2.getClock(i).getValue();
			if(cur2>cur){
				res = 0;
			}
		}
		return res;
	}
	
	public int UnlockRequest(String sender, Clock clock) throws RemoteException{
		QueueElement top = queueB.getQueue(0);
		if(top.getName().equals(sender)){
			queueB.removeQueue(0);
			queue = queueB.build();
			System.out.println("Removed " + sender + "from the queue of " + name);
			return 0;
		}
		else{
			System.out.println("Top not the node which sent the request!");
			while(top != null && compareClock(clock,top.getClockValue()) == 1 && !top.getName().equals(name)){
				queueB.removeQueue(0);
				queue = queueB.build();
				top = queueB.getQueue(0);
			}
			return 0;
		}
	}
	
	public int SendAckRequest(String sender) throws RemoteException{
		System.out.println("Ack received from " + sender + " to " + name);
		acks.put(sender, "1");
		return 0;
	}
	
	public int LockRequest(String sender, Clock clock) throws RemoteException, MalformedURLException, NotBoundException{
		System.out.println("LockRequest received from " + sender + " to " + name);
		//myClock = Math.max(myClock,clock) + 1;
		Clock.Builder new_clock = Clock.newBuilder();
		Clock cur_clock = myClock;
		for(int i=0;i<cur_clock.getClockCount();i++){
			ClockMember.Builder cur_memB = ClockMember.newBuilder();
			cur_memB.setName(cur_clock.getClock(i).getName());
			if(cur_clock.getClock(i).getName().equals(name)){
				int vals1 = cur_clock.getClock(i).getValue();
				int vals2 = clock.getClock(i).getValue();
				cur_memB.setValue(Math.max(vals1, vals2)+1);
			}
			else{
				cur_memB.setValue(cur_clock.getClock(i).getValue());
			}
			ClockMember cur_mem = cur_memB.build();
			new_clock.addClock(cur_mem);
		}
		
		node.setMyClock(new_clock.build());
		if(requestLock == 0){
			Adder receiver_node;
			receiver_node = (Adder)Naming.lookup("rmi://localhost:5000/" + sender);
			receiver_node.SendAckRequest(name);
		}
		else if(hasLock != 0){
			QueueElement.Builder elemB = QueueElement.newBuilder();
			elemB.setClockValue(clock);
			elemB.setName(sender);
			QueueElement elem = elemB.build();
			System.out.println("Added to queue");
			queueB.addQueue(elem);
			queue = queueB.build();
		}
		else if(requestLock != 0){ // requestLock stores the time
			if(compareClock(requestLockClock,clock) == 1){
				Adder receiver_node;
				receiver_node = (Adder)Naming.lookup("rmi://localhost:5000/" + sender);
				receiver_node.SendAckRequest(name);
			}
			else{
				QueueElement.Builder elemB = QueueElement.newBuilder();
				elemB.setClockValue(clock);
				elemB.setName(sender);
				QueueElement elem = elemB.build();
				queueB.addQueue(elem);
				queue = queueB.build();
				System.out.println("Added to queue");
				return 0;
			}
		}
		return 0;
	}

} 